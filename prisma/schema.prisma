// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  empty
  inProcess
  full // Add more types if needed
}

model Events {
  id        String      @id @db.VarChar(50)
  name      String      @db.VarChar(250)
  address   String      @db.VarChar(250)
  startTime DateTime
  budget    Int         @default(5000000)
  createdAt DateTime    @default(now())
  floors    Floors[]    @relation("floorEvent")
  seatTypes SeatTypes[] @relation("seatTypeEvent")
}

model Floors {
  id        String   @id @db.VarChar(50)
  number    Int
  eventId   String   @db.VarChar(50)
  event     Events   @relation("floorEvent", fields: eventId, references: id)
  createdAt DateTime @default(now())
  seats     Seats[]  @relation("seatFloor")
}

model SeatTypes {
  id        String   @id @db.VarChar(50)
  eventId   String   @db.VarChar(50)
  event     Events   @relation("seatTypeEvent", fields: eventId, references: id)
  name      String   @db.VarChar(10)
  price     Float
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seats     Seats[]  @relation("seatType")

  @@index([name])
}

model Seats {
  id          String    @id @db.VarChar(50)
  floorId     String    @db.VarChar(50)
  floor       Floors    @relation("seatFloor", fields: floorId, references: id)
  seatTypeId  String    @db.VarChar(50)
  seatType    SeatTypes @relation("seatType", fields: seatTypeId, references: id)
  number      Int
  status      Status    @default(empty) // for procces
  description Json?     @db.Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  ticket      Tickets[] @relation("seatTicket")
}

model Tickets {
  id           String     @id @db.VarChar(50)
  ticketCodeId String     @db.VarChar(50)
  ticketCode   TicketCode @relation("ticketCodeTickets", fields: ticketCodeId, references: id)
  seatId       String     @db.VarChar(50)
  seat         Seats      @relation("seatTicket", fields: seatId, references: id)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([seatId])
  @@index([ticketCodeId])
}

model TicketCode {
  id            String    @id @db.VarChar(50)
  code          String    @db.VarChar(11)
  userId        String    @db.VarChar(50)
  user          Users     @relation("userCode", fields: userId, references: id)
  paymentStatus Boolean   @default(false) // for payment
  canceled      Boolean   @default(true)
  expired       DateTime?
  history       Json?     @db.Json
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  tickets       Tickets[] @relation("ticketCodeTickets")
}

model Users {
  id         String       @id @db.VarChar(50)
  budget     Float        @default(10000000)
  fullName   String       @db.VarChar(50)
  createdAt  DateTime     @default(now())
  TicketCode TicketCode[] @relation("userCode")
}
